import logging
import simplejson
from random import random

from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render_to_response
from django.core import serializers
from django.template import RequestContext
from django.contrib.sessions.models import Session
from django.contrib.sessions.backends.db import SessionStore

from d_board.models import Node
from d_cards.models import Card, ShuffledLibrary, Deck
from d_game.models import Turn, Match, Board, AI, Puzzle
from d_game.util import daily_activity
from d_cards.util import get_deck_from
from d_feedback.models import PuzzleFeedbackForm
from d_metrics.models import UserMetrics

from d_users.util import has_permissions_for

from d_game import cached
from d_game import game_master, ai


@daily_activity
def puzzle(request):

    puzzle = Puzzle.objects.get(id=request.GET.get('p'))

    # check perms
    if not has_permissions_for(puzzle, request.user, request.session.session_key):
        return HttpResponseRedirect('/puzzles/')

    puzzles = Puzzle.objects.filter(state="approved")

    i = 0
    for p in puzzles:
        if p == puzzle:
            try:
                next_puzzle_url = "/puzzle/?p=%s" % puzzles[i+1].id
            except:
                next_puzzle_url = "/" 
            break
        i += 1 

    request.session["puzzle"] = puzzle.id

    match = init_puzzle_match(request, puzzle) 
    request.session["match"] = match.id

    board = Node.objects.all().order_by('-pk')

    form = PuzzleFeedbackForm()

    return render_to_response("playing.html", locals(), context_instance=RequestContext(request))

@daily_activity
def playing(request): 

    # init
    match = init_match(request) 
    request.session["match"] = match.id

    board = Node.objects.all().order_by('-pk')


    return render_to_response("playing.html", locals(), context_instance=RequestContext(request))


def init_puzzle_match(request, puzzle):

    deck = puzzle.player_cards 

    if request.user.is_authenticated():
        player = request.user
    else:
        player = None

    match = Match(type="puzzle",
            player=player,
            puzzle=puzzle,
            session_key=request.session.session_key,
            friendly_deck_cards=puzzle.player_cards.card_ids,
            ai_deck_cards=[],
            ai_life=puzzle.ai_life,
            friendly_life=puzzle.player_life)
    match.save()

    return match 


def init_match(request):

    deck = get_deck_from(request)

    ai_deck = Deck.objects.all()[0]

    # starting hand, to be filled to 5 on first AI turn
    ai_library.draw(3)

    if request.user.is_authenticated():
        player = request.user
    else:
        player = None

    match = Match(friendly_deck_cards=deck.card_ids,
            ai_deck_cards=ai_deck.card_ids,
            player=player,
            type="ai")
    match.save()

    return match 


def process_player_turn(request):


    match_id = request.session['match']
    game = cached.get_game(match_id)

    logging.info("()()( process player turn for %s" % match_id)

    if request.user.is_authenticated():
        player_name = request.user.username
    else:
        player_name = game_master.ANON_PLAYER_NAME

    # heal player's units
    game_master.heal(game, player_name)

    logging.info("  healed")

    card = None
    node = None

    # first player cast
    node_id = request.POST.get("node1")

    logging.info("  first node %s" % node_id)

    if node_id == "surrender":
        logging.info("TODO: player surrender")
        return

    elif node_id == "pass":
        # do nothing. player has passed this phase
        pass

    try:
        node = Node.objects.get(id=node_id)
    except:
        # node_id could be 'pass' or 'surrender' or 'tech'...
        pass

    card_id = request.POST.get("card1")
    logging.info("  first card %s" % card_id)

    if card and node: 
        logging.info("  card and node, playing")
        game_master.play(game, player_name, card_id, request.POST.get("align1"), node.row, node.x) 

    elif node_id == "tech": 
        if game_master.discard(game, player_name, card_id):
            game_master.tech(game, player_name, 1)

    else:
        logging.info("  no player action")
        # no player action
        pass

    #attack!
    game_master.do_attack_phase(game, player_name)

    # second player cast
    node = None
    card = None

    node_id = request.POST.get("node2")

    if node_id == "surrender":
        logging.info("TODO: player surrender 2")
        return

    elif node_id == "pass":
        # do nothing. player has passed this phase
        pass

    try:
        node = Node.objects.get(id=node_id)
    except:
        # node_id could be 'pass' or 'surrender' or 'tech'...
        pass

    card_id = request.POST.get("card2")

    if card_id and node:
        game_master.play(game, player_name, card_id, request.POST.get("align2"), node.row, node.x)

    elif node_id == "tech":
        if game_master.discard(game, player_name, card_id):
            game_master.tech(game, player_name, 1)
    else:
        # no player action
        pass

    # remove player rubble
    game_master.remove_rubble(game, player_name)


def end_turn(request):

    match_id = request.session['match']
    game = cached.get_game(match_id)

    logging.info("()()( end_turn %s" % match_id)

    if request.user.is_authenticated():
        player_name = request.user.username
    else:
        player_name = game_master.ANON_PLAYER_NAME

    # process what the player has just done & update board state 
    # TODO
    process_player_turn(request) 
    player_turn = []
    game_master.do_turn(game, player_turn)

    cached.save(game)

    # if board.match.winner:
    # player has won. yaaaaay!!
    # return HttpResponse("") 

    game_before_ai = simplejson.dumps(game)

    # let the computer play its turn
    ai_turn = ai.get_turn(game, 'ai') 
    game_master.do_turn(game, ai_turn)
    cached.save(game)

    game_after_ai = simplejson.dumps(game)

    #get 2 new cards for player 
    draw_cards = game_master.draw_up_to(game, player_name, 5)

    #serialize and ship it
    hand_and_turn_json = """{
            'player_draw': %s,
            'ai_turn': %s,
            'verify_board_state_before_ai': %s,
            'verify_board_state_after_ai': %s,
            }""" % (simplejson.dumps(draw_cards),
                    simplejson.dumps(ai_turn),
                    game_before_ai,
                    game_after_ai)

    logging.info(hand_and_turn_json);

    return HttpResponse(hand_and_turn_json, "application/javascript")


def begin_puzzle_game(request):

    match = Match.objects.get(id=request.session['match'])
    game = cached.get_game(match.id)

    logging.info("()()( begin puzzle game %s" % match.id)

    if request.user.is_authenticated():
        player_name = request.user.username
    else:
        player_name = game_master.ANON_PLAYER_NAME

    # init puzzle life
    game['players'][player_name]['life'] = match.puzzle.player_life

    # draw 5 for player
    hand = game_master.draw(game, player_name, 5)

    # puzzle starting units
    # starting_units = PuzzleStartingUnit.objects.filter(puzzle=match.puzzle)
    # for starting_unit in starting_units:
    # unit = starting_unit.create_unit(match) 

    # save changes
    cached.save(game)

    ai_turn = match.puzzle.get_setup_turn() 

    play_cards = []
    for play in ai_turn:
        play_cards.append(Card.objects.get(id=play['card']))

    for card in hand:
        logging.info("5678 hand card: %s" % card)

    hand_and_turn_json = """{
            'player_draw': %s,
            'ai_starting_units': %s,
            'ai_cards': %s,
            }""" % (simplejson.dumps(hand), 
                simplejson.dumps(ai_turn),
                serializers.serialize("json", play_cards))

    return HttpResponse(hand_and_turn_json, "application/javascript")


def first_turn(request):

    match = Match.objects.get(id=request.session["match"])

    if match.type == "ai":
        return begin_ai_game(request)

    elif match.type == "puzzle":
        return begin_puzzle_game(request) 


def begin_ai_game(request):
    
    match = Match.objects.get(id=request.session["match"])

    hand_json = match.friendly_library.draw_as_json(5)

    hand_and_turn_json = """{
            'player_draw': %s,
            'ai_turn': { },
            'ai_cards': { },
            }""" % hand_json

    logging.info(hand_and_turn_json);

    return HttpResponse(hand_and_turn_json, "application/javascript")
